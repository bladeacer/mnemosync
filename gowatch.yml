# gowatch.yml configuration for github.com/bladeacer/mmsync

# The name of the executable file generated under the current directory.
# This ensures the binary is named 'mmsync'.
appname: "mmsync"

# The path where the compiled executable is stored. 
# It's best practice to build into the root directory for gowatch.
output: "./mmsync"

# Specify the command to run after builds are done.
# This runs the executable generated by the build process.
run_cmd: "./mmsync"

# The directory that needs to listen for file changes.
# The project root is implicitly watched, but explicitly add 'cmd' and 'pkg'.
watch_paths:
    - .
    - cmd
    - pkg

# The file name suffix that needs to be monitored.
# Include configuration files like .yml, and potentially .tmpl or .html if applicable.
watch_exts:
    - .go
    - .yml
    - .json

# Additional parameters that need to be added when building the application.
# Use the -o flag here to ensure the binary is named correctly AND placed in the 'output' location.
# This flag is often handled by gowatch's 'appname' and 'output' fields, but explicitly
# passing the package ensures the correct entry point (./main.go) is built.
build_args:
    - -o
    - ./mmsync
    - . # Tells 'go build' to compile the package in the current directory (main.go)

# main package path, can also be a single file, multiple files separated by commas
# Since your main function is in the project root, the package path is '.'
build_pkg: "."

# The rest of the configuration is carried over from your example:

# Additional parameters that need to be added when running the application
# cmd_args:
#     - arg1=val1

# Need to increase environment variables, the current environment variables are loaded by default
# envs:
#     - a=b

# Whether to listen to file changes in the 'vendor' folder
vendor_watch: false

# Directory that do not need to listen for file changes
excluded_paths:
    - vendor
    - .git

# build tags
build_tags: ""

# Commands that can be executed before build the app
# prev_build_cmds:
#     - swag init

# Whether to prohibit automatic operation
disable_run: false

# use GOGC on build
build_go_gc: false

# log level, support debug, info, warn, error, fatal
log_level: "debug"
